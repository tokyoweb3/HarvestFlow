export interface NftContract {
  name: string; // erc721
  symbol: string; // erc721

  chainId: string; // caip-2 format
  address: string; // address on chain

  leaseStart: number;
  leaseEnd: number;
}

export interface NftContractDetails {
  name: string; // erc721
  symbol: string; // erc721

  chainId: string; // caip-2 format
  address: string; // address on chain

  supplyCap: string; // max mintedAmount
  mintedAmount: string; // <= supplyCap

  leaseStart: number;
  leaseEnd: number;
  minYield: string; // min fixed interest rate scaled by 1e18

  accepted_token: string; // Dai only for now
  presalePrice: string; // price to purchase the NFT
  publicsalePrice: string; // price to purchase the NFT

  metadata: any; // cached data from IPFS

  activated: boolean; // see spec

  owner: string;
  signerAddress: string;

  isPresale: boolean;
  isPublicsale: boolean;
}

/**
 * Wrap in a type to get around this issue
 * https://github.com/openapi-ts/openapi-typescript/issues/1695
 */
export type NftContractDetailsResponse = {
  details: NftContractDetails | null;
};

export interface NftHistory {
  address: string;
  history: NftHistoryEvent[];
}

export enum NftHistoryEventType {
  CONTRACT_CREATED = 'contract_created',
  MINT = 'mint',
  ACTIVATE = 'activate',
  CLAIM = 'claim',
  REDEEM = 'redeem',
}

export type NftHistoryEvent = {
  eventType: NftHistoryEventType;
  price?: string;
  projectName?: string;
  transactionHash: string;
  timestamp: number;
};

export interface UserDetails {
  points: number;
  rank: number;
  ownedNfts: NftDetails[];
}

export interface NftDetails {
  tokenId: string;
  contractAddress: string;
  projectName: string;
  lendingData: {
    principle: string;
    lendingStart: number;
    lendingEnd: number;
    yield: string;
    claimedYield: string;
    isRedeemed: boolean;
  };
  metadata: {
    image: string;
  };
}

export interface Summary {
  totalLoaned: number; // amount in Dai
  totalRepaid: number; // amount in Dai
  userCount: number;
}

export interface DeviceSummary {
  deviceId: number;
  totalMileage: number;
  totalDrivingTime: number;
  operationStarted: Date;
}

interface DeviceHistory {
  eventTime: number;
  eventDescription: string;
}

export interface DailyDeviceSummary {
  date: string;
  dailyMileage: number;
  dailyDrivingTime: number;
}

export interface DeviceDetails {
  deviceId: number;
  totalMileage: number;
  totalDrivingTime: number;
  assetType: string;
  vehicleModel: string;
  history: DeviceHistory[];
  dailySummary: DailyDeviceSummary[];
}

// generated by the gen:signatures command
export type SignatureInfo = {
  amount: number;
  signature: string;
};
export type PresaleParticipation = {
  /**
   * recall: you don't have to purchase the full whitelist amount at once
   *         so we have to keep track of how much was been bought so far so they can buy the rest later
   */
  amountBought: number;
  buyable?: SignatureInfo;
};
