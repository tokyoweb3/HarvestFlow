/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user_details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rwaData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetRwaData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/presale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ForAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nft_history/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nft_history/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetProjectHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetTokenDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nft_details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetProjectDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/all_nft": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllNfts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NftDetails: {
            tokenId: string;
            contractAddress: string;
            projectName: string;
            lendingData: {
                isRedeemed: boolean;
                claimedYield: string;
                yield: string;
                /** Format: double */
                lendingEnd: number;
                /** Format: double */
                lendingStart: number;
                principle: string;
            };
            metadata: {
                image: string;
            };
        };
        UserDetails: {
            /** Format: double */
            points: number;
            /** Format: double */
            rank: number;
            ownedNfts: components["schemas"]["NftDetails"][];
        };
        FailedResult: {
            /** @enum {boolean} */
            success: false;
            errorMessage: string;
            /** Format: double */
            errorCode?: number;
        };
        InternalServerErrorResult: components["schemas"]["FailedResult"];
        /** @description comes from the `tsoa` package, but we don't want it as a dependency just for this type */
        FieldErrors: {
            [key: string]: {
                value?: unknown;
                message: string;
            };
        };
        ValidateErrorResult: {
            /** @enum {string} */
            message: "Validation Failed";
            details?: components["schemas"]["FieldErrors"];
        };
        Summary: {
            /** Format: double */
            totalLoaned: number;
            /** Format: double */
            totalRepaid: number;
            /** Format: double */
            userCount: number;
        };
        DeviceHistory: {
            /** Format: double */
            eventTime: number;
            eventDescription: string;
        };
        DailyDeviceSummary: {
            date: string;
            /** Format: double */
            dailyMileage: number;
            /** Format: double */
            dailyDrivingTime: number;
        };
        DeviceDetails: {
            /** Format: double */
            deviceId: number;
            /** Format: double */
            totalMileage: number;
            /** Format: double */
            totalDrivingTime: number;
            assetType: string;
            vehicleModel: string;
            history: components["schemas"]["DeviceHistory"][];
            dailySummary: components["schemas"]["DailyDeviceSummary"][];
        };
        SignatureInfo: {
            signature: string;
            /** Format: double */
            amount: number;
        };
        PresaleParticipation: {
            buyable?: components["schemas"]["SignatureInfo"];
            /**
             * Format: double
             * @description recall: you don't have to purchase the full whitelist amount at once
             *             so we have to keep track of how much was been bought so far so they can buy the rest later
             */
            amountBought: number;
        };
        /** @enum {string} */
        NftHistoryEventType: "contract_created" | "mint" | "activate" | "claim" | "redeem";
        NftHistoryEvent: {
            /** Format: double */
            timestamp: number;
            transactionHash: string;
            projectName?: string;
            price?: string;
            eventType: components["schemas"]["NftHistoryEventType"];
        };
        NftHistory: {
            address: string;
            history: components["schemas"]["NftHistoryEvent"][];
        };
        NftContractDetails: {
            name: string;
            symbol: string;
            chainId: string;
            address: string;
            supplyCap: string;
            mintedAmount: string;
            /** Format: double */
            leaseStart: number;
            /** Format: double */
            leaseEnd: number;
            minYield: string;
            accepted_token: string;
            presalePrice: string;
            publicsalePrice: string;
            metadata: unknown;
            activated: boolean;
            owner: string;
            signerAddress: string;
            isPresale: boolean;
            isPublicsale: boolean;
        };
        /** @description Wrap in a type to get around this issue
         *     https://github.com/openapi-ts/openapi-typescript/issues/1695 */
        NftContractDetailsResponse: {
            details: components["schemas"]["NftContractDetails"] | null;
        };
        NftContract: {
            name: string;
            symbol: string;
            chainId: string;
            address: string;
            /** Format: double */
            leaseStart: number;
            /** Format: double */
            leaseEnd: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetUserDetails: {
        parameters: {
            query: {
                userAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetails"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    GetSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Summary"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    GetRwaData: {
        parameters: {
            query: {
                contractAddress: string;
                tokenId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceDetails"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    ForAddress: {
        parameters: {
            query: {
                contractAddress: string;
                userAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PresaleParticipation"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    GetUserHistory: {
        parameters: {
            query: {
                userAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NftHistory"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    GetProjectHistory: {
        parameters: {
            query: {
                contractAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NftHistory"];
                };
            };
        };
    };
    GetTokenDetails: {
        parameters: {
            query: {
                contractAddress: string;
                tokenId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NftDetails"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    GetProjectDetails: {
        parameters: {
            query: {
                contractAddress: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NftContractDetailsResponse"];
                };
            };
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null;
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
    GetAllNfts: {
        parameters: {
            query?: {
                justActive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NftContract"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateErrorResult"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResult"];
                };
            };
        };
    };
}
